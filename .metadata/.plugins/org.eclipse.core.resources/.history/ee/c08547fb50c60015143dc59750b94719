/*
 * PLC_OperandDictionary.c
 *
 *  Created on: 2014. 10. 27.
 *      Author: skson
 */


#ifndef PLC_OPERANDDICTIONARY_H_
#include "PLC_OperandDictionary.h"
#endif
#include "PLC_Log.h"
static uint16 nOperandListCount=OPERAND_ML_CODE_MAX;

PLC_Operand* PLC_OPERAND_DICTIONARY_findOperand(uint8 typeCode){
	return (nOperandListCount>typeCode)? (PLC_Operand*)&opndic[typeCode] : NULL;
}

PLC_Operand* PLC_OPERAND_DICTIONARY_findOperandByName(char* name){
	uint16 index;
	for(index=0;index<nOperandListCount;index++){
		if(strcmp(name, opndic[index].strType)==0){
			return (PLC_Operand*)&opndic[index];
		}
	}
	return NULL;
}

int OPND_DICT_getRegSize()
{
	for(i=0; i<typeCode;i++)
	{
		memorySize += OPND_DICT_getOperandRegByteSize(uint8 typeCode);
	}
}

int OPND_DICT_getOperandRegHeadOffset(uint8 typeCode)
{
	int i=0;
	int memorySize = 0;
	for(i=0; i<typeCode;i++)
	{
		memorySize += OPND_DICT_getOperandRegByteSize(uint8 typeCode);
	}
	return memorySize;
}

uint16 OPND_DICT_getOperandRegByteSize(uint8 typeCode){
	return opndic[typeCode].nAddressCount * opndic[typeCode].nBitSize / 8;
}
uint16 OPND_DICT_getOperandListCount(){
	return nOperandListCount;
}
void OPND_DICT_printAll(){
	char buf[300];
	int i;
	for(i=0;i<OPERAND_ML_CODE_MAX;i++)
	{
		DBG_LOGSCAN(buf, "[%s] AddrCount : %d, const : %d, size: %d, code : %d\n",
				opndic[i].strType,
				opndic[i].nAddressCount,
				opndic[i].bIsConstant,
				opndic[i].nBitSize,
				opndic[i].nMLCode
			);PLC_LOG_addLog(buf);
	}
}
