/*
 * PLC_InterruptionStack.h
 *
 *  Created on: 2015. 12. 24.
 *      Author: skson
 */

#ifndef PLC_INTERRUPTIONSTACK_H_
#define PLC_INTERRUPTIONSTACK_H_

#include "PLC_Definitions.h"
#include "PLC_PointTable.h"
#define PLC_INTERRUPTION_EVENT_STACK_SIZE 128
#define PLC_INTERRUPTION_EVENT_FLAG_COUNT 32

typedef enum {
	EVENT_NONE=0,
	EVENT_ERROR_TYPE_1,
	EVENT_ERROR_TYPE_2,
	EVENT_ERROR_TYPE_3,
	EVENT_ERROR_TYPE_4,
	EVENT_ERROR_TYPE_5,
	EVENT_ERROR_TYPE_6,
	EVENT_ERROR_TYPE_7,
	EVENT_ERROR_TYPE_8,
	EVENT_ERROR_TYPE_9,
	EVENT_ERROR_TYPE_10,
	EVENT_ERROR_TYPE_11,
	EVENT_ERROR_TYPE_12,
	EVENT_ERROR_TYPE_13,
	EVENT_ERROR_TYPE_14,
	EVENT_ERROR_TYPE_15,
	EVENT_ERROR_TYPE_16,
	EVENT_ERROR_TYPE_17,
	EVENT_ERROR_TYPE_18,
	EVENT_ERROR_TYPE_19,
	EVENT_ERROR_TYPE_20,
	EVENT_ERROR_TYPE_21,
	EVENT_ERROR_TYPE_22,
	EVENT_ERROR_TYPE_23,
	EVENT_ERROR_TYPE_24,
	EVENT_ERROR_TYPE_25,
	EVENT_ERROR_TYPE_26,
	EVENT_ERROR_TYPE_27,
	EVENT_ERROR_TYPE_28,
	EVENT_ERROR_TYPE_29,
	EVENT_ERROR_TYPE_30,
	EVENT_ERROR_TYPE_31,
	EVENT_ERROR_TYPE_32,
}EventFlag;


typedef struct{
	int nEventStackSize;
	int nEventGIPMapperSize;
	int nCallbackSize;
	EventFlag stackEvent[PLC_INTERRUPTION_EVENT_STACK_SIZE];
	uint32 mapEventGIP[PLC_INTERRUPTION_EVENT_FLAG_COUNT];
	PLC_Point stackCallbackPoint[PLC_INTERRUPTION_EVENT_STACK_SIZE];
} PLC_EventHandler;

PLC_EventHandler* PLC_EventHandler_getInstance();
uint8 PLC_EventHandler_hasEvent();
int PLC_EventHandler_eventCount();
void PLC_EventHandler_init();
uint8 PLC_EventHandler_mapEventFlagToGIP(EventFlag flag, uint32 GIP);
uint8 PLC_EventHandler_pushEvent(EventFlag flag);
uint8 PLC_EventHandler_pullEvent(uint32* dstGIP);
uint8 PLC_EventHandler_pushCallbackPosition(uint8 taskIdx, uint32 taskPos);
uint8 PLC_EventHandler_callbackPosition(uint8 *taskIdx, uint32 *taskPos);
uint8 PLC_EventHandler_callEvent();
#endif /* PLC_INTERRUPTIONSTACK_H_ */
