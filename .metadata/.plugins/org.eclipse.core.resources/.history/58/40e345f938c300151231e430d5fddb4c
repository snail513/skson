/*
 * PLC_IL_Task.c
 *
 *  Created on: 2014. 12. 23.
 *      Author: skson
 */

#ifndef PLC_IL_TASK_H_
#include "PLC_IL_Task.h"

#endif
#include "PLC_OperatorDictionary.h"
static PLC_IL_Task_List taskList;
static char buf[100];
//static char END_POS[PLC_IL_TASK_MAXCOUNT];
#define MAX_MPS_STACK 16
static uint8 STACK_MPS_POINT[MAX_MPS_STACK];
static uint8 currStackMPSCount;


uint8 TaskList_MPSBranch(uint8 val)//MPS
{
	if(currStackMPSCount >= MAX_MPS_STACK)
		return FALSE;
	STACK_MPS_POINT[currStackMPSCount] = val;
	currStackMPSCount++;
	return TRUE;
}
uint8 TaskList_MRDBranch(uint8 *val)//MRD
{
	if(currStackMPSCount == 0)
		return FALSE;
	*val = STACK_MPS_POINT[currStackMPSCount-1];
	return TRUE;
}
uint8 TaskList_MPPBranch(uint8 *val)//MPP
{
	if(currStackMPSCount == 0)
		return FALSE;
	currStackMPSCount--;
	*val = STACK_MPS_POINT[currStackMPSCount];
	return TRUE;
}

uint32 binarySearch(uint32 array[], uint32 arraySize, uint32 search)
{
	uint32 first, last, middle;

	first = 0;
	last = arraySize-1;
	middle = (first+last)/2;
	//printf("print first[0] = %d, last[%d] = %d\n",0, first, arraySize-1,array[arraySize-1]);
	while (first <= last) {

		if (array[middle] < search)
			first = middle + 1;
		else if (array[middle] == search) {
			 //printf("%d found at location %d.\n", search, middle+1);
			 break;
		}
		else
			last = middle - 1;

		middle = (first + last)/2;
	}
	if (first > last)
	{
	  //printf("Not found! %d is not present in the list.\n", search);
	  return 0xFFFFFFFF;
	}
	return middle+1;


}

void TaskList_init(){
	memset(&taskList, 0, sizeof(PLC_IL_Task_List));
	int i;
	for(i=0;i<PLC_IL_TASK_MAXCOUNT;i++)
	{
		memset(taskList.list[i].bitValueCurrList, CURRVAL_NEUTRON, PLC_STEP_MAX_CMDCOUNT);
		//memset(taskList.list[i].bitValueCurrList, CURRVAL_NEUTRON, PLC_STEP_MAX_CMDCOUNT);
		taskList.list[i].nLaunchingCondition = CONDITION_NOT_LOADED;
		taskList.taskOrder[i] = i;
	}
	memset(STACK_MPS_POINT, 0, MAX_MPS_STACK);

	currStackMPSCount = 0;
}

void TaskList_setOrder(uint8 taskOrder[]){
	memcpy(taskList.taskOrder, taskOrder, MAX_TASK_COUNT);
}

uint8 TaskList_getOrder(uint8* taskIdx, uint8 taskOrder)
{
	if(taskOrder>=8)
		return FALSE;
	*taskIdx = taskList.taskOrder[taskOrder];
	return TRUE;
}
PLC_IL_Task_List* TaskList_getInstance(){
	return &taskList;
}

uint32 TaskList_getCurrTaskEnd(uint32 currPos){
	uint32 prevEndPos = 0;
	int idxTask;
	for(idxTask=0; idxTask<PLC_IL_TASK_MAXCOUNT; idxTask++)
	{
		uint32 currEndPos = taskList.list[idxTask].nCurrEndPos;
		if(currEndPos == currPos)
			return taskList.list[idxTask].nCurrEndPos;
		else if(currPos>prevEndPos && currPos<currEndPos)
			return taskList.list[idxTask].nCurrEndPos;
		prevEndPos = taskList.list[idxTask].nCurrEndPos;
	}
	return PLC_DEVICE_FALSE_32;
}

uint32 TaskList_getTaskSize(uint8 taskIdx)
{
	if(taskIdx>=MAX_TASK_COUNT)
		return 0;
	return taskList.list[taskIdx].nCurrEndPos;
}
uint8 TaskList_addTask(uint8 instruction[], uint32 sizeInstruction, LaunchingCondition condition, uint8 taskIdx)
{
	uint8 pos = taskIdx;
	if(taskIdx>=MAX_TASK_COUNT)
		return FALSE;

	memset(taskList.list[taskIdx].taskML, 0, INSTRUCTION_MEMORY_TASK_SIZE);
	memcpy(taskList.list[taskIdx].taskML, instruction, sizeInstruction);

	taskList.list[pos].nLaunchingCondition = condition;
	taskList.list[pos].nCurrEndPos = sizeInstruction;
	taskList.nTaskCount++;
	return TRUE;
}

uint8 TaskList_AddJumpingPoint(){

	uint16 taskIdx;
	PLC_PointTable_init();
	for(taskIdx=0;taskIdx<TaskList_getCount();taskIdx++)
	{

		uint32 pos;
		uint8* taskHead = TaskList_getTaskHead(taskIdx);
		uint32 cmdCount = TaskList_getCMDCount(taskIdx);
		uint16 operator;
		int i=0;

		for(i=0;i<cmdCount;i++)
		{
			pos = TaskList_getCMDPosition(taskIdx, i);
			//pos = TaskList_getTaskCMDValue(i);
			memcpy(&operator, &taskHead[pos], sizeof(uint16)) ;

			if(operator == ML_CODE_POINT)
			{
				uint16 label;
				memcpy(&label, &taskHead[pos+3], sizeof(uint16));
				printf("addTask : TaskIdx %d, label %d\n", taskIdx, label);
				if(!PLC_PointTable_addToList(taskIdx, pos, label))
				{
					return FALSE;
				}
				PLC_PointTable_print();
			}
		}

	}
	//PLC_PointTable_print();
	//
	return TRUE;
}

uint8* TaskList_getTaskHead(uint8 taskIdx)
{
	if(taskIdx>PLC_IL_TASK_MAXCOUNT-1)
		return NULL;
	return taskList.list[taskIdx].taskML;
}
uint8 TaskList_getTaskCMDValue(uint32 pos){
	int taskIdx = PLC_DeviceExecutor_getCurrTaskIdx();
	PLC_IL_Task *task= &(taskList.list[taskIdx]);

	{
		uint32 arrayPos = binarySearch(task->cmdPosList, task->nCurrCMDCount, pos);
		if(arrayPos==0xFFFFFFFF)
			return 0xFF;
		return task->bitValueCurrList[arrayPos];
	}
	return 0xFF;
}
uint8 TaskList_getTaskCMDIndexValue(uint8 taskIdx, uint32 pos){
	PLC_IL_Task *task= &(taskList.list[taskIdx]);
	{
		uint32 arrayPos = binarySearch(task->cmdPosList, task->nCurrCMDCount, pos);
		if(arrayPos==0xFFFFFFFF)
			return 0xFF;
		return task->bitValueCurrList[arrayPos];
	}
	return 0xFF;
}
uint8 TaskList_setTaskCMDValue(uint32 pos, uint8 bitVal){
	int taskIdx = PLC_DeviceExecutor_getCurrTaskIdx();

	//for(taskIdx=0; taskIdx<taskList.nTaskCount;taskIdx++)
	{
		PLC_IL_Task *task= &(taskList.list[taskIdx]);
		//if(taskIdx==taskList.nTaskCount-1 || pos<task[1].cmdPosList[0])
		{

			uint32 arrayPos = binarySearch(task->cmdPosList, task->nCurrCMDCount, pos);
			if(arrayPos==0xFFFFFFFF)
			{
				DBG_LOGPRINT("Cannot found target position [idx | pos = %d | %d]!\n", taskIdx, pos);
				return FALSE;;//continue;
			}
			task->bitValueCurrList[arrayPos] = bitVal;

			return TRUE;

		}
		DBG_LOGPRINT("Where can I find [task->nCurrCMDCount[%d] size = %d | pos = %d] in ?\n", taskIdx, task->nCurrCMDCount, pos);
	}

	return FALSE;
	//DBG_LOGSCAN(buf, "\t\t[ERROR] nTaskCount =%d, nCurrCMDCount = %d\n",taskList.nTaskCount, taskList.list[taskIdx].nCurrCMDCount);PLC_LOG_addLog(buf);
}
/*uint8 TaskList_getCount()
{
	return taskList.nTaskCount;
}
uint8 TaskList_getCMDCount(uint8 taskIdx)
{
	return taskList.list[taskIdx].nCurrCMDCount;
}
uint8 TaskList_getCMDPosition(uint8 taskIdx, uint16 cmdIdx)
{
	return taskList.list[taskIdx].cmdPosList[cmdIdx];
}

uint8 TaskList_isAlways(uint8 taskIdx){

	return taskList.list[taskIdx].nLunchingCondition ==ALWAYS_EXEC;
}
uint8 TaskList_isAlarm(uint8 taskIdx){

	return taskList.list[taskIdx].nLunchingCondition ==ALARM_EXEC;
}
uint8 TaskList_isInterruption(uint8 taskIdx){

	return taskList.list[taskIdx].nLunchingCondition ==INTERRUPTION_EXEC;
}*/
uint8 Task_loadTasksFromBuffers(uint8 buffer[], int bufSize, uint8 taskIdx, LaunchingCondition condition){
	//DBG_LOGPRINT("\n[LINE]%d\n", __LINE__);
	int pos = 0;
	int startingPoint = 0;
	uint16 currMLInstruction;


	uint8 rst = FALSE;
	int operatorLength = OPERATOR_LENGTH;
	int operandLength = OPERAND_LENGTH;
	int operandCount;
	uint8 isStartingPoint = TRUE;
	//printf("%s %d\n", __FUNCTION__, __LINE__);

	//DBG_LOGPRINT("Instruction size : %d\n", bufSize);
	/*int idx;
	for(idx = 0; idx<200; idx++)
	{
		printf("%02X ", buffer[idx]);
		if(idx%50==49)
					printf("\n");
		else if(idx%10==9)
			printf("\t");
	}
	printf("\n");*/
	while(pos<bufSize)
	{
		uint16* loadValue = (uint16*)&buffer[pos];
		currMLInstruction = *loadValue & 0x0FFFF;
		PLC_Operator* opt =PLC_OPERATOR_DICTIONARY_findOperator(currMLInstruction);

		if(opt==NULL)
		{
			DBG_LOGPRINT("Unknown OPT ML(=%d, pos = %d, bufferSize = %d) has been detected!\n", currMLInstruction, pos, bufSize);
			return FALSE;
		}
		operandCount = opt->nOperandPosCount;
		if(isStartingPoint==TRUE)
		{
			isStartingPoint=FALSE;
			startingPoint = pos;
			rst = FALSE;

		}
		if(opt->nMLCode!=0){
			TaskList_addCMDHeadPos(taskIdx, pos);

			if(opt->nStatus == OPERATOR_STEP_PART_START || opt->nStatus == OPERATOR_STEP_PART_WHOLE)
				TaskList_addLungHeadPos(taskList.nTaskCount, pos);
		}
		if(currMLInstruction == ML_CODE_POINT)
		{
			uint16* label = (uint16*)&buffer[pos+3];
			printf("taskIdx : %d, pos = %d, label = %d\n", taskIdx, pos, *label);
			if(!PLC_PointTable_addToList(taskIdx, pos, *label))
				return FALSE;;
			pos+=3;
			continue;
		}
		pos+=operatorLength;
		int i;
		for(i=0;i<operandCount;i++)
		{

			if(buffer[pos]==OPERAND_ML_CODE_N)
				pos+= operandLength*2;
			else if(buffer[pos]==OPERAND_ML_CODE_Z)
				pos+= operandLength*2;
			else if(buffer[pos]==OPERAND_ML_CODE_WB)
				pos+= operandLength*2;
			else if(buffer[pos]==OPERAND_ML_CODE_DK)
				pos+= 5;
			else if(buffer[pos]==OPERAND_ML_CODE_E)
				pos+= 5;
			else if(buffer[pos]==OPERAND_ML_CODE_DE)
				pos+= 9;
			else if(buffer[pos]==OPERAND_ML_CODE_STR)
			{


				pos+= 1+getOperandStrLength(buffer, (uint32*)&pos);
			}
			else
				pos+=3;

		}

		if(currMLInstruction == ML_CODE_END){
				//DBG_LOGPRINT("[CHECK] starting : %d\n", startingPoint);
			//DBG_LOGPRINT("end\n");
			TaskList_addTask(buffer, pos, condition, taskIdx);

			isStartingPoint = TRUE;
			rst = TRUE;

			break;
		}
	}
	//printf("%s %d\n", __FUNCTION__, __LINE__);
	//printf("Task registration rst = %d\n", rst );
	//printf("taskCount = %d\n", taskList.nTaskCount);
	return rst;
}


uint8 TaskList_addLungHeadPos(uint8 taskIdx,uint16 pos){
	if(taskList.list[taskIdx].nCurrStepCount>=PLC_STEP_MAX_COUNT)
	{
		DBG_LOGPRINT("\t[ERROR]overflow (STEP count >= %d)while %s. ",PLC_STEP_MAX_COUNT,__FUNCTION__ );
		return FALSE;
	}
	taskList.list[taskIdx].lungPosList[taskList.list[taskIdx].nCurrStepCount]= pos;
	taskList.list[taskIdx].nCurrStepCount++;
	return TRUE;
}

uint8 TaskList_changeLaunchingCondition(uint8 taskIdx, LaunchingCondition condition)
{
	if(taskList.list[taskIdx].nCurrStepCount>=PLC_STEP_MAX_COUNT)
	{
		DBG_LOGPRINT("\t[ERROR]overflow (STEP count >= %d)while %s. ",PLC_STEP_MAX_COUNT,__FUNCTION__ );
		return FALSE;
	}
	taskList.list[taskIdx].nLaunchingCondition = condition;
	return TRUE;
}

uint8 TaskList_addCMDHeadPos(uint8 taskIdx, uint16 pos){
	//printf("taskIdx : %d\n",taskIdx);
	if(taskList.list[taskIdx].nCurrCMDCount>=PLC_STEP_MAX_CMDCOUNT)
	{
		DBG_LOGPRINT("\t[ERROR]overflow (CMD count >= %d)while %s. ",PLC_STEP_MAX_CMDCOUNT,__FUNCTION__ );
		return FALSE;
	}
	//printf("taskList.list[taskIdx].nCurrCMDCount : %d\n",taskList.list[taskIdx].nCurrCMDCount);
	taskList.list[taskIdx].cmdPosList[taskList.list[taskIdx].nCurrCMDCount]= pos;
	taskList.list[taskIdx].nCurrCMDCount++;
	//printf("__LINE__ : %d\n",__LINE__);
	return TRUE;
}
