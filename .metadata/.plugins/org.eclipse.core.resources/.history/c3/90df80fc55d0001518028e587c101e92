/*
 * PLC_OperandDictionary.h
 *
 *  Created on: 2014. 10. 27.
 *      Author: skson
 */

#ifndef PLC_OPERANDDICTIONARY_H_
#define PLC_OPERANDDICTIONARY_H_

#include "PLC_Operand.h"

#define OPND_DIC_SYMBOL_X "X"
#define OPND_DIC_SYMBOL_Y "Y"
#define OPND_DIC_SYMBOL_R "R"
#define OPND_DIC_SYMBOL_L "L"
#define OPND_DIC_SYMBOL_F "F"
#define OPND_DIC_SYMBOL_B "B"
#define OPND_DIC_SYMBOL_SM "SM"
#define OPND_DIC_SYMBOL_D "D"
#define OPND_DIC_SYMBOL_W "W"
#define OPND_DIC_SYMBOL_SW "SW"
#define OPND_DIC_SYMBOL_SD "SD"
#define OPND_DIC_SYMBOL_Z "Z"
#define OPND_DIC_SYMBOL_T "T"
#define OPND_DIC_SYMBOL_C "C"
#define OPND_DIC_SYMBOL_K "K"
#define OPND_DIC_SYMBOL_H "H"
#define OPND_DIC_SYMBOL_E "E"
#define OPND_DIC_SYMBOL_DE "DE"
#define OPND_DIC_SYMBOL_STR "$"
#define OPND_DIC_SYMBOL_N "N"
#define OPND_DIC_SYMBOL_WB "WB"
#define OPND_DIC_SYMBOL_DK "DK"
#define OPND_DIC_SYMBOL_U "U"
#define OPND_DIC_SYMBOL_J "J"


#define OPERAND_SIZE_C 2048
#define OPERAND_SIZE_T 2048

#define OPERAND_ML_CODE_X 0
#define OPERAND_ML_CODE_Y 1
#define OPERAND_ML_CODE_R 2
#define OPERAND_ML_CODE_L 3
#define OPERAND_ML_CODE_F 4
#define OPERAND_ML_CODE_B 5
#define OPERAND_ML_CODE_SM 6
#define OPERAND_ML_CODE_D 7
#define OPERAND_ML_CODE_W 8
#define OPERAND_ML_CODE_SW 9
#define OPERAND_ML_CODE_SD 10
#define OPERAND_ML_CODE_Z 11
#define OPERAND_ML_CODE_T 12
#define OPERAND_ML_CODE_C 13
#define OPERAND_ML_CODE_K 14
#define OPERAND_ML_CODE_H 15
#define OPERAND_ML_CODE_E 16
#define OPERAND_ML_CODE_DE 17
#define OPERAND_ML_CODE_STR 18
#define OPERAND_ML_CODE_N 19
#define OPERAND_ML_CODE_WB 20
#define OPERAND_ML_CODE_DK 21
#define OPERAND_ML_CODE_U 22
#define OPERAND_ML_CODE_J 23
#define OPERAND_ML_CODE_MAX 24
#define OPERAND_ML_CODE_Zin 0xFF

#define OPND_DIC_TYPE_BIT 1
#define OPND_DIC_TYPE_NIBBLE 4
#define OPND_DIC_TYPE_WORD 16
#define OPND_DIC_TYPE_DWORD 32
#define OPND_DIC_TYPE_LONG 64
#define OPND_DIC_TYPE_STR 0
static const PLC_Operand opndic[]={

			{OPND_DIC_SYMBOL_X, 8192,	FALSE, OPND_DIC_TYPE_BIT, OPERAND_ML_CODE_X}
			,{OPND_DIC_SYMBOL_Y, 8192,	FALSE, OPND_DIC_TYPE_BIT, OPERAND_ML_CODE_Y}
			,{OPND_DIC_SYMBOL_R, 8192,	FALSE, OPND_DIC_TYPE_BIT, OPERAND_ML_CODE_R}
			,{OPND_DIC_SYMBOL_L, 8192,	FALSE, OPND_DIC_TYPE_BIT, OPERAND_ML_CODE_L}
			,{OPND_DIC_SYMBOL_F, 2048,	FALSE, OPND_DIC_TYPE_BIT, OPERAND_ML_CODE_F}
			,{OPND_DIC_SYMBOL_B, 8192,	FALSE, OPND_DIC_TYPE_BIT, OPERAND_ML_CODE_B}
			,{OPND_DIC_SYMBOL_SM, 2048,	FALSE, OPND_DIC_TYPE_BIT, OPERAND_ML_CODE_SM}
			,{OPND_DIC_SYMBOL_D, 12288,	FALSE, OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_D}
			,{OPND_DIC_SYMBOL_W, 8192,	FALSE, OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_W}
			,{OPND_DIC_SYMBOL_SW, 2048,	FALSE, OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_SW}
			,{OPND_DIC_SYMBOL_SD, 2048,	FALSE, OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_SD}
			,{OPND_DIC_SYMBOL_Z, 16,		FALSE, OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_Z}
			,{OPND_DIC_SYMBOL_T, OPERAND_SIZE_T,	FALSE, OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_T}
			,{OPND_DIC_SYMBOL_C, OPERAND_SIZE_C,	FALSE, OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_C}
			,{OPND_DIC_SYMBOL_K, 0,		TRUE , OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_K}
			,{OPND_DIC_SYMBOL_H, 0, 		TRUE , OPND_DIC_TYPE_DWORD, OPERAND_ML_CODE_H}
			,{OPND_DIC_SYMBOL_E, 0, 		TRUE , OPND_DIC_TYPE_DWORD, OPERAND_ML_CODE_E}
			,{OPND_DIC_SYMBOL_DE, 0, 	FALSE, OPND_DIC_TYPE_LONG, OPERAND_ML_CODE_DE}
			,{OPND_DIC_SYMBOL_STR, 0, 	TRUE , OPND_DIC_TYPE_STR, OPERAND_ML_CODE_STR}
			,{OPND_DIC_SYMBOL_N, 0, 	FALSE, OPND_DIC_TYPE_NIBBLE, OPERAND_ML_CODE_N}
			,{OPND_DIC_SYMBOL_WB, 0, 	FALSE, OPND_DIC_TYPE_BIT, OPERAND_ML_CODE_WB}
			,{OPND_DIC_SYMBOL_DK, 0, 	TRUE, OPND_DIC_TYPE_BIT, OPERAND_ML_CODE_DK}
			,{OPND_DIC_SYMBOL_U, 0x7FFF, 	FALSE, OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_U}
			,{OPND_DIC_SYMBOL_J, 0x7FFF, 	FALSE, OPND_DIC_TYPE_WORD, OPERAND_ML_CODE_J}
};
PLC_Operand* PLC_OPERAND_DICTIONARY_findOperand(uint8 typeCode);
PLC_Operand* PLC_OPERAND_DICTIONARY_findOperandByName(char* name);
int OPND_DICT_getOperandRegHeadOffset(uint8 typeCode);
int OPND_DICT_getOperandRegHeadOffset_old(uint8 typeCode);
int OPND_DICT_getRegSize();
uint16 OPND_DICT_getOperandRegByteSize(uint8 typeCode);
uint16 OPND_DICT_getOperandListCount();
void OPND_DICT_printAll();
#endif /* PLC_OPERANDDICTIONARY_H_ */
