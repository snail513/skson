/*
 * AddTest.c
 *
 *  Created on: 2016. 5. 4.
 *      Author: skson
 */


#ifndef ADDTEST_H_
#include "AddTest.h"

static uint16 operatorMLCode=0;
static PLC_Device_Stack operands[5];
static uint32 currOperandVal = 0;
static uint32 currOperand[5];
static PLC_Operator* opt;

uint8 test_setOperator(uint16 operatorML)
{
	int i, j;
	operatorMLCode = operatorML;
	opt = PLC_OPERATOR_DICTIONARY_findOperator(operatorML);

	for(i=0;i<opt->nOperandPosCount;i++)
	{
		STACK_clear(&operands[i]);
		for(j = 0; j<OPERAND_ML_CODE_MAX; j++)
		{
			if(PLC_OPERATOR_getOperandMap(operatorMLCode, i, j))
			{
				STACK_push(&operands[i], j);
				DBG_LOGPRINT("[%s|%d] push operand ML : %d\n", opt->strName, i, j);
			}
		}
	}
	int maxCase = 1;
	for(i = 0; i<opt->nOperandPosCount; i++)
	{
		maxCase *= operands[i].size;
	}
	return TRUE;
}

uint8 test_setOperand()
{
	int i;
	int currVal = currOperandVal;
	for(i=0;i<opt->nOperandPosCount;i++)
	{
		currOperand[i] = currVal%operands[i].size;
		currVal/= operands[i].size;
		DBG_LOGPRINT("[%d] curr operand ML : %d\n", i, currOperand[i]);
	}
}

uint8 test_setOperandAddr()
{

}

uint8 test_setIL()
{
	addMLOperator(ML_CODE_LD);addMLOperand(OPERAND_ML_CODE_X, 0);
	addMLOperator(operatorMLCode);
	test_setOperand();
	addMLOperator(ML_CODE_END);addMLOperand(OPERAND_ML_CODE_X, 0);
	TestCodeTearDown();
}
uint8 test_setRegInput(uint8 operand, uint8 min_mid_max_Addr)
{
	PLC_Operand opnd = opndic[operand];
	if(opnd.bIsConstant)

}

uint8 test_main(int argc, char* argv[])
{
	test_setOperator(ML_CODE_SRCH);
	test_setOperand();
}
#endif


