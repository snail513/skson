/*
 * PLC_InterruptionStack.c
 *
 *  Created on: 2015. 12. 24.
 *      Author: skson
 */

#ifndef PLC_INTERRUPTIONSTACK_H_
#include "PLC_EventHandler.h"
#include "PLC_DeviceStack.h"
#include "PLC_OperandDictionary.h"
#include "PLC_Register.h"
#endif

static PLC_EventHandler eventHandler;
static uint8 isEnableGlobalInterruption = TRUE;


extern uint8 PLC_TaskExecutor_execOneScanTime(uint8 taskIdx, uint32 currPos, EventFlag priority);
extern uint8 PLC_TaskExecutor_setCurrPoint(uint8 taskIdx, uint32 taskPos);
extern EventFlag PLC_TaskExecutor_getCurrPriority();
/*
 * static PLC_Device_Stack currTaskIdxStack;
uint16 PLC_EventHandler_getCurrTaskIdx()
{
	return STACK_pick(&currTaskIdxStack);
}

uint16 PLC_EventHandler_pushTaskIdx(uint8 taskIdx)
{
	return STACK_push(&currTaskIdxStack, taskIdx);
}

uint16 PLC_EventHandler_pushTaskIdx(uint8 taskIdx)
{
	return STACK_pull(&currTaskIdxStack);
}

PLC_EventHandler* PLC_EventHandler_getInstance()
{
	return &eventHandler;
}*/
inline uint8 PLC_EventHandler_hasEvent()
{
	if(!isEnableGlobalInterruption)
	//return (eventHandler.nEventStackSize>0);
	if (eventHandler.nEventStackSize==0)
		return FALSE;
	return (eventHandler.stackEvent[eventHandler.nEventStackSize-1]>PLC_TaskExecutor_getCurrPriority());
}
inline int PLC_EventHandler_eventCount()
{
	return eventHandler.nEventStackSize;
}
inline void PLC_EventHandler_init(){
	PLC_EventHandler_enableInterruption();
	memset(&eventHandler, 0, sizeof(eventHandler));
}
inline uint8 PLC_EventHandler_mapEventFlagToGIP(EventFlag flag, uint32 GIP)
{
	if(flag >= PLC_INTERRUPTION_EVENT_FLAG_COUNT)
		return FALSE;
	eventHandler.mapEventGIP[flag] = GIP;
	return TRUE;
}
inline void PLC_EventHandler_unmap()
{
	memset(eventHandler.mapEventGIP, 0, PLC_INTERRUPTION_EVENT_FLAG_COUNT*sizeof(uint32));
}
/////
inline uint8 PLC_EventHandler_pullEvent(EventFlag* dstFlag, uint32* dstGIP)
{
	//EventFlag lastEventFlag;
	if(eventHandler.nEventStackSize==0)
		return FALSE;
	eventHandler.nEventStackSize--;
	*dstFlag = eventHandler.stackEvent[eventHandler.nEventStackSize];
	*dstGIP = eventHandler.mapEventGIP[*dstFlag];
	return TRUE;
}
inline uint8 PLC_EventHandler_pushCallbackPosition(uint8 taskIdx, uint32 taskPos)
{
	if(eventHandler.nCallbackSize>=PLC_INTERRUPTION_EVENT_STACK_SIZE)
		return FALSE;
	eventHandler.stackCallbackPoint[eventHandler.nCallbackSize].taskIdx = taskIdx;
	eventHandler.stackCallbackPoint[eventHandler.nCallbackSize].nDevicePoint = taskPos;
	eventHandler.nCallbackSize++;
	return TRUE;
}

inline uint8 PLC_EventHanstmfrldler_callbackPosition(uint8 *taskIdx, uint32 *taskPos)
{
	if(eventHandler.nCallbackSize==0)
		return FALSE;
	eventHandler.nCallbackSize--;
	*taskIdx = eventHandler.stackCallbackPoint[eventHandler.nCallbackSize].taskIdx;
	*taskPos = eventHandler.stackCallbackPoint[eventHandler.nCallbackSize].nDevicePoint;

	return PLC_TaskExecutor_setCurrPoint(*taskIdx, *taskPos);
}
/////
/*USER SIDE METHOD*/
inline uint8 PLC_EventHandler_pushEvent(EventFlag flag)
{
	uint16 sdWordAddr = flag/16 + PLC_SD_INTERRUPT_IMASK_0;
	uint16 sdBitAddr = flag%16;
	uint8 mask = PLC_Register_getWordBit(OPERAND_ML_CODE_SD, sdWordAddr, sdBitAddr);
	if(mask)
	{
		if(eventHandler.nEventStackSize>=PLC_INTERRUPTION_EVENT_STACK_SIZE)
			return FALSE;
		eventHandler.stackEvent[eventHandler.nEventStackSize] = flag;
		eventHandler.nEventStackSize++;
		bubbleSort(eventHandler.stackEvent, eventHandler.nEventStackSize);
	}
	else
	{
		DBG_LOGPRINT("Flag %d is disabled!\n", flag);
	}
	return TRUE;
}
/*USER SIDE METHOD*/
inline uint8 PLC_EventHandler_callEvent()
{

	uint32 dstGIP = 0;
	EventFlag dstFlag;
	uint16 sdRegDefaultInterruptionAddr = PLC_SD_REG_INT0_COUNT;
	uint16 interruptionCount;
	//if(!PLC_EventHandler_pushCallbackPosition(*currTaskIdx, *currTaskPos))
	//	return FALSE;
	if(!PLC_EventHandler_pullEvent(&dstFlag, &dstGIP))
	{
		DBG_LOGPRINT("[ERROR] G-Point[%d] cannot pull!\n", dstGIP);
		return FALSE;
	}
	DBG_LOGPRINT("[Event] G-Point[%d] called!\n", dstGIP);
	uint8 interruptionTaskIdx = 0;
	uint32 interruptionTaskPos= 0;

	if(!PLC_PointTable_getGIPByLabel(&interruptionTaskIdx, &interruptionTaskPos, dstGIP))
	{
		DBG_LOGPRINT("[ERROR] G-Point[%d] : %d.%d cannot found from map!\n", dstGIP, interruptionTaskIdx, interruptionTaskPos);
		return FALSE;
	}

	if(PLC_TaskExecutor_execOneScanTime(interruptionTaskIdx, interruptionTaskPos, dstFlag)!=ML_CODE_IRET)
	{
		DBG_LOGPRINT("[ERROR] G-Point[%d] : %d.%d execution failed!\n", dstGIP, interruptionTaskIdx, interruptionTaskPos);
		return FALSE;
	}
	sdRegDefaultInterruptionAddr += dstGIP;
	interruptionCount = PLC_Register_getWord(OPERAND_ML_CODE_SD, sdRegDefaultInterruptionAddr) + 1;

	if(!PLC_Register_set(OPERAND_ML_CODE_SD, sdRegDefaultInterruptionAddr, 0, (uint8*)&interruptionCount, TYPE_WORD))
		return FALSE;
	return TRUE;
}

inline uint8 PLC_EventHandler_callFunction(uint32 pointLabel)
{


	uint8 interruptionTaskIdx = 0;
	uint32 interruptionTaskPos= 0;

	if(!PLC_PointTable_getPointByLabel(&interruptionTaskIdx, &interruptionTaskPos, pointLabel))
	{
		DBG_LOGPRINT("[ERROR] Local Point[%d] : %d.%d cannot found from map!\n", pointLabel, interruptionTaskIdx, interruptionTaskPos);
		return FALSE;
	}

	if(!PLC_TaskExecutor_execOneScanTime(interruptionTaskIdx, interruptionTaskPos, 0))
	{
		DBG_LOGPRINT("[ERROR] Local Point[%d] : %d.%d execution failed!\n", pointLabel, interruptionTaskIdx, interruptionTaskPos);
		return FALSE;
	}
	//sdRegDefaultInterruptionAddr += pointLabel;
	//interruptionCount = PLC_Register_getWord(OPERAND_ML_CODE_SD, sdRegDefaultInterruptionAddr) + 1;

	//if(!PLC_Register_set(OPERAND_ML_CODE_SD, sdRegDefaultInterruptionAddr, 0, (uint8*)&interruptionCount, TYPE_WORD))
	//	return FALSE;
	return TRUE;
}

void PLC_EventHandler_enableInterruption()
{
	uint16 val = 0xFFFF;
	int i = 0;
	for(i = 0; i< 4; i++)
		PLC_Register_set(OPERAND_ML_CODE_SD, PLC_SD_INTERRUPT_IMASK_0 + i, 0, &val, TYPE_WORD);
}
void PLC_EventHandler_disableInterruption()
{
	uint16 val = 0;
	int i = 0;
	for(i = 0; i< 4; i++)
		PLC_Register_set(OPERAND_ML_CODE_SD, PLC_SD_INTERRUPT_IMASK_0 + i, 0, &val, TYPE_WORD);
}

uint8 PLC_EventHandler_imask(uint16 maskArray[])
{
	int i;
	uint16 tarAddr = PLC_SD_INTERRUPT_IMASK_0;
	for( i = 0 ; i < 8 ; i++ )
	{
		PLC_Register_set(OPERAND_ML_CODE_SD, i+tarAddr, 0, &maskArray[i], TYPE_WORD);
	}
	return TRUE;
}
inline void bubbleSort(EventFlag arr[], int size)
{
	int i, j;
	EventFlag tmp;
	for(i=0;i<size-1;i++)//비교횟수는 데이터갯수-1, 자기 자신과는 비교 하지 않음
	{
		for(j=0;j<size-1;j++)
		{
			if(arr[j] > arr[j+1])
			{
				tmp=arr[j];//뒷자리의 수가 더 크면 교체
				arr[j]=arr[j+1];
				arr[j+1]=tmp;
			}
		}
	}
	for(i=0;i<size;i++)
		DBG_LOGPRINT("[%d]%d ", i, arr[i]);
	DBG_LOGPRINT("\n");
}
